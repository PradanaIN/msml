# -*- coding: utf-8 -*-
"""eksperimen_msml

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1akzr5CPX2zM7QXvLR5XywcZdbPi-jhYF

# **1. Perkenalan Dataset**

Dataset yang saya gunakan dalam proyek ini adalah Students Performance in Exams yang diambil dari Kaggle (https://www.kaggle.com/datasets/spscientist/students-performance-in-exams). Dataset ini berisi data hasil ujian siswa di beberapa mata pelajaran beserta informasi demografi dan latar belakang pendidikan orang tua.

Dataset ini memiliki 8 kolom utama, yaitu:

- gender: jenis kelamin siswa (male/female)
- race/ethnicity: kelompok etnis siswa (contoh: group A, group B, dst)
- parental level of education: tingkat pendidikan orang tua siswa
- lunch: jenis layanan makan siang yang diterima siswa (standard/reduced)
- test preparation course: apakah siswa mengikuti kursus persiapan ujian (completed/none)
- math score: nilai matematika siswa (0-100)
- reading score: nilai membaca siswa (0-100)
- writing score: nilai menulis siswa (0-100)

Dataset ini terdiri dari sekitar 1000 baris data, di mana setiap baris merepresentasikan satu siswa dan nilai-nilai yang diperolehnya pada ujian.

Dataset ini sangat berguna untuk menganalisis faktor-faktor yang memengaruhi performa akademik siswa serta membangun model prediksi nilai ujian berdasarkan informasi demografi dan kebiasaan belajar.

# **2. Import Library**

Tahap ini mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning atau deep learning.
"""

# Commented out IPython magic to ensure Python compatibility.
# Import library dasar untuk manipulasi data dan visualisasi
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Library untuk preprocessing dan machine learning
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Library tambahan untuk eksplorasi
import missingno as msno

# Supaya grafik langsung tampil di notebook
# %matplotlib inline

"""# **3. Memuat Dataset**"""

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/dicoding/msml/students_performance.csv'
df = pd.read_csv(file_path)

df.head()

print(f'Dataset memiliki {df.shape[0]} baris dan {df.shape[1]} kolom.\n')

df.info()

"""# **4. Exploratory Data Analysis (EDA)**

Pada tahap ini dilakukan **Exploratory Data Analysis (EDA)** untuk memahami karakteristik dataset. Tujuan dari EDA adalah untuk memperoleh wawasan awal yang mendalam mengenai data dan menentukan langkah selanjutnya dalam analisis atau pemodelan.

## 1. Statistik Deskriptif
"""

df.describe()

"""- Math score: Nilai berkisar antara 0 hingga 100 dengan rata-rata sekitar 66.
- Reading score: Rata-rata lebih tinggi dibanding math, sekitar 70.
- Writing score: Hampir serupa dengan reading score, rata-rata sekitar 69.
- Nilai matematika cenderung sedikit lebih rendah dibanding kemampuan membaca dan menulis.

## 2. Cek Missing Values
"""

df.isnull().sum()

"""Tidak ditemukan missing values.

## 3. Cek Duplikasi
"""

df.duplicated().sum()

"""Tidak ada baris duplikat.

## 4. Distribusi Skor Siswa
"""

# Plot distribusi skor
plt.figure(figsize=(15, 4))
for i, subject in enumerate(['math score', 'reading score', 'writing score']):
    plt.subplot(1, 3, i + 1)
    sns.histplot(df[subject], kde=True, bins=20)
    plt.title(f'Distribusi {subject}')
plt.tight_layout()
plt.show()

"""- Distribusi math score terlihat lebih menyebar dan cenderung normal, meski ada sedikit skew ke kiri.
- Reading dan writing scores memiliki distribusi yang mirip, cenderung simetris.
- Distribusi skor cukup normal, cocok untuk model-model statistik seperti regresi atau klasifikasi jika dilakukan binning.

## 5. Korelasi Antar Skor
"""

scores = df[['math score', 'reading score', 'writing score']]
sns.heatmap(scores.corr(), annot=True, cmap='Blues')
plt.title('Korelasi antar nilai')
plt.show()

"""Terdapat korelasi kuat antara:
- Reading score dan Writing score (sekitar 0.95)
- Math score juga berkorelasi baik dengan dua skor lainnya (sekitar 0.8)
- Siswa yang bagus di satu bidang cenderung bagus di bidang lain. Sehingga fitur-fitur ini bisa saling mendukung dalam prediksi.

## 6. Rata-rata Nilai Berdasarkan Gender
"""

plt.figure(figsize=(10, 4))
mean_scores = df.groupby('gender')[['math score', 'reading score', 'writing score']].mean()
mean_scores.plot(kind='bar')
plt.title('Rata-rata skor berdasarkan gender')
plt.ylabel('Skor')
plt.xticks(rotation=0)
plt.legend(loc='upper right')
plt.tight_layout()
plt.show()

"""- Perempuan cenderung memiliki skor reading dan writing yang lebih tinggi.
- Laki-laki memiliki skor math sedikit lebih tinggi dari perempuan.
- Ada perbedaan skor antar gender berdasarkan jenis mata pelajaran. Bisa jadi fitur gender berpengaruh terhadap hasil prediksi nilai.

## 7. Pengaruh Test Preparation Course
"""

plt.figure(figsize=(10, 4))
prep_scores = df.groupby('test preparation course')[['math score', 'reading score', 'writing score']].mean()
prep_scores.plot(kind='bar')
plt.title('Skor berdasarkan keikutsertaan test preparation course')
plt.ylabel('Skor')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""- Siswa yang mengikuti test preparation course secara konsisten memiliki nilai lebih tinggi di semua mata pelajaran.
- Fitur test preparation course merupakan indikator kuat terhadap performa akademik. Sangat layak dipertimbangkan sebagai variabel penting dalam modeling.

Karena skor terdiri dari tiga jenis nilai, ada beberapa pendekatan yang bisa diambil:

- Regresi: memprediksi skor (misalnya, math score).
- Klasifikasi: klasifikasikan siswa ke dalam kategori performa (rendah/sedang/tinggi) berdasarkan skor gabungan.

Proyek akan mengklasifikasikan performa siswa ke dalam beberapa kategori berdasarkan skor, karena:

- Klasifikasi lebih mudah dikomunikasikan.
- Lebih sesuai untuk sistem monitoring dan alerting.
- Mudah dijadikan basis model pipeline dan di-deploy ke MLflow dan Grafana.

# **5. Data Preprocessing**

Pada tahap ini, data preprocessing adalah langkah penting untuk memastikan kualitas data sebelum digunakan dalam model machine learning.

## 5.1 Menangani Missing Values
"""

print(df.isnull().sum())

"""Karena data tidak memiliki missing values, maka tidak dilakukan penanganan apapun.

## 5.2 Menangani Duplikasi
"""

print(f"Jumlah data duplikat: {df.duplicated().sum()}")
df = df.drop_duplicates()

"""Karena data tidak memiliki duplikasi data, maka tidak dilakukan penanganan apapun.

## 5.3 Menghitung Skor Gabungan

Menghitung rata-rata dari `math score`, `reading score`, dan `writing score` untuk membentuk fitur baru bernama `average_score`.

Hal ini dilakukan karena dataset punya 3 skor terpisah (math score, reading score, dan writing score) yang menggambarkan performa siswa secara berbeda-beda.
Supaya lebih sederhana dan efektif, kita gabungkan ketiganya menjadi satu skor rata-rata (average_score). Ini akan menjadi ukuran kinerja keseluruhan siswa agar mempermudah klasifikasi dengan satu target kinerja, bukan 3 target yang berbeda.
"""

df['average_score'] = df[['math score', 'reading score', 'writing score']].mean(axis=1)

"""Label klasifikasi `performance_level` berdasarkan kriteria:

A : 85–100 → Sangat Baik

B : 75–84 → Baik

C : 60–74 → Cukup

D : 50–59 → Kurang

E : 0–49 → Sangat Kurang
"""

def score_to_grade(score):
    if score >= 85:
        return 'A'
    elif score >= 75:
        return 'B'
    elif score >= 60:
        return 'C'
    elif score >= 50:
        return 'D'
    else:
        return 'E'

df['performance_level'] = df['average_score'].apply(score_to_grade)

df.head()

"""##  5.4 Encoding Fitur Kategorikal

Model machine learning tidak dapat langsung memproses data non-numerik seperti gender atau tingkat pendidikan orang tua. Encoding (OneHotEncoding) mengubah data kategori menjadi format numerik yang bisa dimengerti model. Tahap ini memproses fitur kategori menjadi bentuk numerik agar dapat digunakan oleh algoritma klasifikasi.
"""

categorical_cols = ['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course']
df_encoded = pd.get_dummies(df, columns=categorical_cols)

"""## 5.5 Memisahkan Fitur dan Target

Untuk melatih model, data dipisahkan menjadi fitur input (X) dan label target (y).
Target (performance_level) tidak boleh termasuk dalam fitur.
"""

X = df_encoded.drop(['math score', 'reading score', 'writing score', 'average_score', 'performance_level'], axis=1)
y = df_encoded['performance_level']

"""## 5.6 Split Data

Untuk mengevaluasi performa model secara adil, data dibagi menjadi data latih dan data uji (test). Ini mencegah model hanya "menghapal" data latih tapi gagal prediksi data baru.
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

"""## 5.7 Standarisasi Fitur

Beberapa algoritma machine learning sensitif terhadap skala fitur. Standarisasi membuat fitur memiliki rata-rata 0 dan standar deviasi 1, sehingga model dapat belajar lebih efisien. Standarisasi akan menormalkan data agar pelatihan model menjadi lebih stabil dan cepat konvergen.
"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""## 6. Export Data"""

df_encoded.to_csv('/content/students_performance_preprocessed_manual.csv', index=False)